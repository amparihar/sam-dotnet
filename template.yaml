AWSTemplateFormatVersion: 2010-09-09
Description: sam-dnc-boilerplate
Transform: AWS::Serverless-2016-10-31

Parameters: 
  ServiceName:  
    Type: String
    Default: sam-items-api
    Description: Service Name

  ApiStageName: 
    Type: String
    Default: dev
    AllowedValues: 
      - dev
      - stage
      - perf
      - prod
    Description: Stage Param

  SeedItems:
    Type: List<String>
    Description: Seed Item Values

Globals:
  Function:
    Runtime: dotnetcore3.1
    MemorySize: 128
    Timeout: 10
    Environment:
      Variables:
        ITEM_TABLE_NAME: !Ref ItemTable
        USER_TABLE_NAME: !Ref UserTable
        DYNAMODB_SERVICEURL: !Sub https://dynamodb.${AWS::Region}.amazonaws.com
        JWT_ACCESS_TOKEN: random-hexa-crypro 
  Api:
    Auth:
        DefaultAuthorizer: jwtAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          basicAuthorizer:
            FunctionPayloadType: TOKEN
            FunctionArn: !GetAtt basicAuthorizerFunction.Arn
            Identity:
              Header: Authorization
              #ValidationExpression: Bearer *
          jwtAuthorizer:
            FunctionPayloadType: TOKEN
            FunctionArn: !GetAtt jwtAuthorizerFunction.Arn
            Identity:
              Header: Authorization
              #ValidationExpression: Bearer *
    Cors: 
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
    # GatewayResponses:
    #   ACCESS_DENIED:
    #     StatusCode: 403
    #     ResponseTemplates:
    #       application/json: |
    #         { "message": $context.authorizer.message }

Resources:
  ProtectedApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref ApiStageName
        
      Models:
        SaveItemRequestValidator:
          $schema: http://json-schema.org/draft-07/schema#
          type: object
          required:
            - id
            - key
            - name
          properties:
            id:
              type: string
            key:
              type: string
            name:
              type: string
  
  getItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/
      Handler: sam-dnc::Lambda.Functions.GetItemsFunction::Run
      Description: Query Items by id and key
      Timeout: 120
      Policies: 
        - DynamoDBReadPolicy:
            TableName: !Ref ItemTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "sam-dnc-boilerplate/${ApiStageName}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/query
            Method: POST
            RestApiId: !Ref ProtectedApiGatewayApi
            

  getItemsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${getItemsFunction}"

  saveItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/
      Handler: sam-dnc::Lambda.Functions.SaveItemFunction::Run
      Description: Save Item
      Timeout: 120
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "sam-dnc-boilerplate/${ApiStageName}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api
            Method: POST
            RestApiId: !Ref ProtectedApiGatewayApi
            # RequestModel:
            #   Model: SaveItemRequestValidator
            #   Required: True

  saveItemFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${saveItemFunction}"

  basicAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/
      Handler: sam-dnc::Lambda.Functions.BasicAuthorizer::Authorize

  basicAuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${basicAuthorizerFunction}"

  jwtAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/
      Handler: sam-dnc::Lambda.Functions.JwtAuthorizer::Authorize

  jwtAuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${jwtAuthorizerFunction}"

  signUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/
      Handler: sam-dnc::Lambda.Functions.SignUpFunction::Run
      Description: SignUp 
      Timeout: 120
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "sam-dnc-boilerplate/${ApiStageName}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/signup/
            Method: POST
            RestApiId: !Ref ProtectedApiGatewayApi
            Auth:
              Authorizer: NONE

  signUpFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${signUpFunction}"

  signInFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/
      Handler: sam-dnc::Lambda.Functions.SignInFunction::Run
      Description: SignIn
      Timeout: 120
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "sam-dnc-boilerplate/${ApiStageName}"
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/signin/
            Method: POST
            RestApiId: !Ref ProtectedApiGatewayApi
            Auth:
              Authorizer: NONE

  signInFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${signInFunction}"
            
  initDynamoDBFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./src/
      Handler: sam-dnc::Lambda.Functions.InitDynamoDBFunction::Run
      Description: Seed DynamoDb Data
      Timeout: 120
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref ItemTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "sam-dnc-boilerplate/${ApiStageName}"
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:DeleteTable
            Resource:
              - !GetAtt ItemTable.Arn
              - !GetAtt UserTable.Arn

  initDynamoDBFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${initDynamoDBFunction}"
  
  initDynamoDB:
    Type: 'AWS::CloudFormation::CustomResource'
    DependsOn: initDynamoDBFunction
    Properties:
      ServiceToken: !GetAtt initDynamoDBFunction.Arn
      SeedData: !Ref SeedItems 

  ssmSimpleParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/sam-dnc-boilerplate/${ApiStageName}/authToken"
      Type: String #ssm parameters of type securestring cannot be created using cloudformation
      Value: any unencrypted simple string value 

  ItemTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub "${ServiceName}-Item-${ApiStageName}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: key
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: key
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  UserTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: !Sub "${ServiceName}-user-${ApiStageName}"
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: username
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

Outputs:
  InitDynamoDBFunction:
    Description: Seed Db
    Value: !GetAtt initDynamoDBFunction.Arn
  GetItemsFunction:
    Description: "Query Items Fn ARN"
    Value: !GetAtt getItemsFunction.Arn
  SaveItemFunction:
    Description: "Save Items Fn ARN"
    Value: !GetAtt saveItemFunction.Arn
  ItemsTable:
    Description: "Item DynamoDB Table Name"
    Value: !Ref ItemTable
  ApiGateway:
    Description: "API EndPoint"
    Value: !Sub "https://${ProtectedApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}/api"
    Export:
      Name: !Join
              - ":"
              - - !Ref AWS::StackName
                - ApiGateway